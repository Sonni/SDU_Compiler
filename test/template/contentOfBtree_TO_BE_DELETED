
type Tree = template<t1> class {

   

  func print():int
    return print_in(root);
end print

  func print_in(node: Node):int

    #if(node->left != null) then sink = print_in(node->left);
  
    write node->key;

    #if(node->right != null) then sink = print_in(node->right);
  
    return 0;
  end print_in
  
};

var tree : Tree<int>;

write 0;

________________________________________________________________________________

  func print():int
    return print_in(root);
end print

  func print_in(node: Node):int
    #write 0;
    if(node->left != null) then sink = print_in(node->left);
  #  write 1;
    write node->key;
  #  write 2;
    if(node->right != null) then sink = print_in(node->right);
  #  write 3;

    return 0;
  end print_in



  

  

  func delete(key: t1): int
    if(treesize != 0) then
      return delete_in(root, key);
    else
      return 0;
  end delete

  func delete_in(node: Node, key: t1): int
    var suc: Node;
    var temp: t1;


    if(node->key == key) then{

      if(node->right == null && node->left == null) then{   #CASE have no children
        if (node->parent->right == node) then{
          node->parent->right = null;
        }
        else{
          node->parent->left = null;
        }
        treesize--;
        return 0;
      }
      if (node.left == null) then{  #CASE only have right child
        #TODO
        if(node->parent->left == node) then{
          node->parent->left = node->right;
        }
        else{
          node->parent->right = node->right;
        }

        node->right->parent = node->parent;


        return 0;
      }
      if(node->right == null) then{  #CASE only have left child
        #TODO
        if(node->parent->left == node) then{
          node->parent->left = node->left;
        }
        else{
          node->parent->right = node->left;
        }

        node->right->parent = node->parent;
        return 0;
      }


      #CASE have two children
      suc = successor(node);
      temp = node->key;
      node->key = suc->key;
      suc->key = temp;
      return delete_in(suc, key);

      return 0;
    }
    if (node->key > key) then {
      return delete_in(node.left, key);
    }
    else{
      return delete_in(node.right, key);
    }
  end delete_in

    func successor(node: Node): Node
      var cursor: Node;

      cursor = node->right;

      while (cursor->left != null) do
      {
        cursor = cursor->left;
      }
      return cursor;

    end successor
